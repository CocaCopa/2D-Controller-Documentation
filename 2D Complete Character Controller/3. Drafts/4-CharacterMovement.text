Character Movement class:
This class takes charge of your character's movement, seamlessly combining animation curves with Unity's Rigidbody2D component. This dynamic setup empowers you to create various types of movement, whether snappy or smooth.

In the inspector, exposed properties allow you to fine-tune both 'ground' and 'aerial' movement, providing animation curves for acceleration and deceleration. Additionally, dedicated values enable control over the evaluation speed of these curves. These values play a crucial role in determining how quickly your character reaches the designated top speed, as defined by the 'moveSpeed' variable.

The CharacterMovement class extends beyond managing general movement letting you to finely tune your character's jump behavior. Control parameters such as normal jump strength, wall jump strengths (both X and Y), airborne behavior without player input, and aerial stand jump speed. These settings provide a comprehensive toolkit for tailoring your character's movement dynamics.

-Public Properties:
1. float TopSpeed: Character's movement speed. (get)
2. float CurrentSpeed: Current speed of your character (get - set)
3. Vector3 MoveDirection: The direction your character is heading toward (get - set)

-Public Methods:
1. void SetCharacterMoveSpeed(float value):
value -> New moveSpeed value
Let's you chage the movement speed (top speed) for your character.

2. Vector2 OnGroundHorizontalVelocity(Vector2 moveInput, bool runsIntoWall):
moveInput -> Directional input provided by the player or AI controler.
runsIntoWall -> Indicates whether the character is colliding with a wall.
Returns -> A vector with the calculated X axis velocity.
Calculates the horizontal movement of your character.

3. Vector2 VerticalVelocity(bool againstWall):
againstWall -> True, if your character is performing a jump against a wall.
Returns -> A vector with the calculated Y axis velocity.
Calling method will make your character perform a jump.

4. Vector2 OnAirHorizontalVelocity(Vector2 moveInput, bool runsIntoWall):
moveInput -> Directional input provided by the player or AI controler.
runsIntoWall -> Indicates whether the character is colliding with a wall.
Returns: A vector with the calculated velocity for the X axis only, based on the move speed the character had when grounded.
Calculates your characters aerial movement.